use tokio::task;
use std::sync::Arc;

async fn fetch_data(url: Arc<String>) -> String {
    println!("Fetching {}", url);
    tokio::time::sleep(tokio::time::Duration::from_secs(1)).await; // 模拟网络延迟
    format!("data from {}", url)
}

#[tokio::main]
async fn main() {
    let urls = vec![
        Arc::new("http://example.com/1".to_string()),
        Arc::new("http://example.com/2".to_string()),
        Arc::new("http://example.com/3".to_string()),
    ];

    let tasks = urls.into_iter().map(|url| task::spawn(fetch_data(url.clone())));

    for task in tasks {
        let result = task.await.unwrap();
        println!("{}", result);
    }
}
